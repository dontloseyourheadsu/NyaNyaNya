@page "/gameplay/{IsPlayMusic:bool}/{PlanetId:int}"

<div class="d-flex flex-column justify-content-center align-items-center h-100 w-100 game-bg"
     style="@($"background: url('images/backgrounds/background-{PlanetId}.jpg'); background-size: 100% 100%;")">
    <span class="position-absolute game-box energy-box">
        <img src="images/icons/thunder.png" alt="thunder" style="width: 45px; height: 70px;"> @energy
    </span>

    <div class="@($"menu-frame d-flex justify-content-between align-items-center position-absolute {menuFrameClass}")" style="z-index: 10;">
        <img class="cursor-pointer close-icon" src="images/icons/exit.jpg" @onclick="@SwitchMenuFrame">
        <NavLink href="@($"/{IsPlayMusic}")" class="cursor-pointer">
            <span class="exit-button justify-content-center cursor-pointer">Exit</span>
        </NavLink>
    </div>

    <span class="position-absolute game-box config-box cursor-pointer justify-content-center" @onclick="@SwitchMenuFrame">
        <img src="images/icons/pixel-paw.png" alt="paw" style="height: 90%; width: 90%;" />
    </span>

    <div class="castle"></div>

    <!--platforms-->
    @for (int i = 0; i < platformsY.Count; i++)
    {
        @for (int j = 0; j < platformsX.Count; j++)
        {
            var y = i;
            var x = j;
            int platformVersion = 0;

            if (x % 2 == 0)
            {
                platformVersion = y % 2 == 0 ? 1 : 2;
            }
            else
            {
                platformVersion = y % 2 == 0 ? 2 : 1;
            }

            <div class="platform platform-@platformVersion position-absolute" style="@($"top: {platformsY[y]}px; left: {platformsX[x]}px;")" @onclick="@(e => PlaceCat(e, x, y))"></div>
        }
    }

    <!--cats-->
    @for (int i = 0; i < platformsY.Count; i++)
    {
        @for (int j = 0; j < platformsX.Count; j++)
        {
            var y = i;
            var x = j;
            var cat = catsOnField[y, x];

            if (cat != null && cat.Name != null && cat.Name != "")
            {
                <img class="position-absolute" src="@cat.Image"
         style="@($"top: {cat.Y}px; left: {cat.X}px; width: {cat.Width}px; height: {cat.Height}px;")" />

                for (int k = 0; k < cat.Projectiles.Length; k++)
                {
                    if (!cat.Projectiles[k]) continue;
                    var pId = k;

                    switch (cat.Name)
                    {
                        case "Space Cat":
                            <div class="position-absolute" style="@($"top: {cat.ProjectilesY[pId]}px; left: {cat.ProjectilesX[pId]}px;")" @onclick="@(e => Recharge(e, x, y, pId))">
                                <img class="position-absolute" src="images/projectiles/energy-ball.png"
             style="@($"width: 30px; height: 30px;")" />
                            </div>
                            break;
                        case "Wise Cat":
                            <div class="position-absolute" style="@($"top: {cat.Y}px; left: {cat.X}px;")" @onclick="@(e => Recharge(e, x, y, pId))">
                                <img class="position-absolute animate-battery" src="images/projectiles/battery.png"
             style="@($"width: 30px; height: 30px;")" />
                            </div>
                            break;
                    }
                }

            }
        }
    }

    <!--rats-->
    @for (int i = 0; i < ratsOnField.Length; i++)
    {
        var ratIndex = i;
        var rat = ratsOnField[ratIndex];

        if (rat != null)
        {
            <img class="position-absolute" src="@rat.Image"
         style="@($"top: {rat.Y}px; left: {rat.X}px; width: {rat.Width}px; height: {rat.Height}px;")" />
        }
    }

    <!--drawer-->
    <div class="d-flex justify-content-center align-items-center position-absolute center-absolute" style="gap: 10px; bottom: 0;">
        @for (int i = 0; i < 6; i++)
        {
            var selectedDrawer = i;

            <div class="d-flex flex-column @containerClasses[selectedDrawer]" style="height: 80px; width: 70px; z-index: 5;" @onclick="@(e => SelectCat(e, selectedDrawer))">
                <div class="cat-container d-flex align-items-center justify-content-center" style="height: 80%; width: 100%;">
                    <img src="@catDrawer[i].Image" style="width: 75%; height: 75%;" />
                </div>
                <span class="cat-container d-flex align-items-center justify-content-center" style="height: 20%; width: 100%; font-size: 5px;">@catDrawer[i].Name</span>
            </div>
        }
    </div>

    <p style="color: white; position: absolute; bottom: 0; left: 0;">
        @gameSeconds | @planet.Waves
    </p>
</div>

<MusicPlayer Track="Skate" PlayMusic="IsPlayMusic" />

@code {
    [Parameter]
    public bool IsPlayMusic { get; set; }

    [Parameter]
    public int PlanetId { get; set; }

    [Parameter]
    public int CatNames { get; set; }

    Planet planet;

    private int energy = 1;
    protected float gameSpeed = 0.125f;
    protected float gameSeconds = 0;

    private List<int> platformsX = new List<int>();
    private List<int> platformsY = new List<int>();

    private Cat[,]? catsOnField = new Cat[4, 8];
    private Rat[]? ratsOnField = new Rat[10];
    private bool[] ratsCanFall = new bool[10];
    private int[] ratPlatformFallIndex = new int[10];

    private int ratFallIndex;
    private bool firstWaveLoop = true;

    private string menuFrameClass = "menu-frame-off";
    private bool menuFrameOn = false;

    private List<string> containerClasses = new List<string>();
    private string containerSelected = "drawer-selected";
    private Cat selectedCat;
    private bool catIsSelected = false;

    private bool isWave = false;

    private List<Cat> catDrawer = new List<Cat>();
    private List<Rat> rats = new List<Rat>();

    string rootpath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "wwwroot");

    public GamePlay()
    {
        using (StreamReader r = new StreamReader(rootpath + "/database/selected-cats.json"))
        {
            string json = r.ReadToEnd();
            var catsTemp = JsonConvert.DeserializeObject<List<Cat>>(json);
            catDrawer = catsTemp;
        }

        using (StreamReader r = new StreamReader(rootpath + "/database/rats.json"))
        {
            string json = r.ReadToEnd();
            var tempRats = JsonConvert.DeserializeObject<List<Rat>>(json);

            rats = tempRats.Where(r => r.Worlds.Contains(PlanetId)).ToList();
        }

        using (StreamReader r = new StreamReader(rootpath + "/database/planets.json"))
        {
            string json = r.ReadToEnd();
            var tempPlanets = JsonConvert.DeserializeObject<List<Planet>>(json);

            planet = tempPlanets.Where(p => p.Index == PlanetId).FirstOrDefault();
        }

        File.WriteAllText(rootpath + "/database/selected-cats.json", string.Empty);

        for (int i = 0; i < 4; i++)
        {
            platformsY.Add(30 + (i * 80));
        }

        for (int i = 0; i < 8; i++)
        {
            platformsX.Add(180 + (i * 80));
        }

        for (int i = 0; i < 6; i++)
        {
            containerClasses.Add("");
        }


        for (int i = 0; i < platformsX.Count; i++)
        {
            for (int j = 0; j < platformsY.Count; j++)
            {
                catsOnField[j, i] = new Cat() { Name = "", Image = "" };
            }
        }

        selectedCat = new Cat() { Name = "", Image = "" };

        for (int i = 0; i < 10; i++)
        {
            ratsOnField[i] = new Rat(rats[new Random().Next(0, rats.Count)]);
            ratsCanFall[i] = false;
            ratPlatformFallIndex[i] = new Random().Next(0, 4);
        }

        ratFallIndex = 0;
        ratsOnField[0] = new Rat(rats[0]);
        ratsOnField[1] = new Rat(rats[0]);

        ratsOnField = ratsOnField.OrderBy(r => r.Id).ToArray();
    }

    protected void SwitchMenuFrame()
    {
        menuFrameOn = !menuFrameOn;
        menuFrameClass = menuFrameOn ? "" : "menu-frame-off";
    }

    private void SelectCat(MouseEventArgs e, int selectedDrawer)
    {
        for (int i = 0; i < 6; i++)
        {
            containerClasses[i] = "";
        }

        containerClasses[selectedDrawer] = containerSelected;

        selectedCat = catDrawer[selectedDrawer];
        catIsSelected = true;
    }

    private void PlaceCat(MouseEventArgs e, int x, int y)
    {
        if (catsOnField[y, x] == null || catsOnField[y, x].Name == "")
        {
            if (selectedCat.Price <= energy)
            {
                catsOnField[y, x] = new Cat(selectedCat);
                catsOnField[y, x].X = platformsX[x] + 12;
                catsOnField[y, x].Y = platformsY[y];
                energy -= selectedCat.Price;
            }
        }

        catIsSelected = false;
        for (int i = 0; i < 6; i++)
        {
            containerClasses[i] = "";
        }
        selectedCat = new Cat() { Name = "", Image = "" };
    }

    private void Recharge(MouseEventArgs e, int catX, int catY, int projectileId)
    {
        catsOnField[catY, catX].Projectiles[projectileId] = false;
        catsOnField[catY, catX].ProjectileIndex = projectileId;
        energy++;
    }

    private void ReleaseProjectiles()
    {
        for (int i = 0; i < platformsX.Count; i++)
        {
            for (int j = 0; j < platformsY.Count; j++)
            {
                if (catsOnField[j, i].Name == null || catsOnField[j, i].Name == "") continue;

                if(catsOnField[j, i].Life <= 0)
                {
                    RemoveCat(i, j);
                    continue;
                }

                if (gameSeconds % catsOnField[j, i].Recharge == 0)
                {
                    catsOnField[j, i].Projectiles[catsOnField[j, i].ProjectileIndex] = true;
                    if (catsOnField[j, i].ProjectileIndex < catsOnField[j, i].Projectiles.Length - 1)
                    {
                        catsOnField[j, i].ProjectileIndex++;
                    }
                    else
                    {
                        catsOnField[j, i].ProjectileIndex = 0;
                    }
                }

                switch (catsOnField[j, i].Name)
                {
                    case "Space Cat":
                        for (int k = 0; k < catsOnField[j, i].Projectiles.Length; k++)
                        {
                            if (catsOnField[j, i].Projectiles[k])
                            {
                                if (catsOnField[j, i].ProjectilesFirstActive[k])
                                {
                                    catsOnField[j, i].ProjectilesX[k] = catsOnField[j, i].X;
                                    catsOnField[j, i].ProjectilesY[k] = catsOnField[j, i].Y;
                                    catsOnField[j, i].ProjectilesFirstActive[k] = false;
                                }
                                else
                                {
                                    catsOnField[j, i].ProjectilesX[k] += 3;
                                }

                                CheckProjectileCollision(i, j, k);
                            }
                        }
                        break;
                    case "Wise Cat":

                        break;
                }

                CheckRatCollision(i, j);
            }
        }
    }

    private void AnimateRatsFall()
    {
        bool firstLoop = true;
        for (int i = 0; i < ratsOnField.Length; i++)
        {
            if (!isWave)
            {
                if (gameSeconds % 10 == 0 && ratFallIndex < ratsOnField.Length && firstLoop)
                {
                    ratsCanFall[ratFallIndex] = true;
                    ratFallIndex++;
                    firstLoop = false;
                }
            }
            else
            {
                if (firstWaveLoop)
                {
                    ratsCanFall[i] = true;
                    if (i == ratsOnField.Length - 1)
                    {
                        firstWaveLoop = false;
                    }
                }
            }

            if (ratsCanFall[i] && ratsOnField[i].WasReleasedDuringWave)
            {
                ratsOnField[i].Y += 5;
            }

            if (ratsOnField[i].Y >= platformsY[ratPlatformFallIndex[i]] && ratsOnField[i].Y <= platformsY[ratPlatformFallIndex[i]] + 80)
            {
                ratsCanFall[i] = false;
                ratsOnField[i].HasLanded = true;
            }
        }
    }

    private void CheckProjectileCollision(int x, int y, int p)
    {
        var cat = catsOnField[y, x];
        var pX = cat.ProjectilesX[p];
        var pY = cat.ProjectilesY[p];
        var pActive = cat.Projectiles[p];

        for (int i = 0; i < ratsOnField.Length; i++)
        {
            if (!pActive) break;

            var rat = ratsOnField[i];

            switch (cat.Name)
            {
                case "Space Cat":
                    if ((pY >= rat.Y && pY <= rat.Y + rat.Height) || (rat.Y >= pY && rat.Y <= pY + 30))
                    {
                        if ((pX >= rat.X && pX <= rat.X + rat.Width) || (rat.X >= pX && rat.X <= pX + 30))
                        {
                            ratsOnField[i].Life = ratsOnField[i].Life - cat.Attack;
                            catsOnField[y, x].ProjectilesX[p] = catsOnField[y, x].X;
                            catsOnField[y, x].Projectiles[p] = false;
                            break;
                        }
                    }
                    break;
            }

        }
    }

    private void CheckRatLife()
    {
        for (int i = 0; i < ratsOnField.Length; i++)
        {
            if (ratsOnField[i].Life <= 0)
            {
                int ratIndex = rats.FindIndex(r => r.Name == ratsOnField[i].Name);
                ratsOnField[i].Life = rats[ratIndex].Life;
                ratsOnField[i].X = rats[ratIndex].X;
                ratsOnField[i].Y = rats[ratIndex].Y;
                ratsOnField[i].WasReleasedDuringWave = false;
                ratsOnField[i].HasLanded = false;
            }
        }
    }

    private void MoveRats()
    {
        for (int i = 0; i < ratsOnField.Length; i++)
        {
            if (ratsOnField[i].HasLanded)
            {
                ratsOnField[i].X -= ratsOnField[i].Speed;
            }
        }
    }

    private void CheckRatCollision(int x, int y)
    {
        for (int i = 0; i < ratsOnField.Length; i++)
        {
            if (ratsOnField[i].HasLanded)
            {
                if (ratsOnField[i].X <= catsOnField[y, x].X + 30 && ratsOnField[i].X >= catsOnField[y, x].X)
                {
                    if (ratsOnField[i].Y >= catsOnField[y, x].Y && ratsOnField[i].Y <= catsOnField[y, x].Y + 80)
                    {
                        catsOnField[y, x].Life = catsOnField[y, x].Life - ratsOnField[i].Attack;
                        ratsOnField[i].X -= ratsOnField[i].Speed;
                    }
                }
            }
        }
    }

    private void RemoveCat(int x, int y)
    {
        catsOnField[y,x] =  new Cat() { Name = "", Image = "" };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            while (true)
            {
                await Task.Delay((int)(1000 * gameSpeed));

                AnimateRatsFall();
                ReleaseProjectiles();
                CheckRatLife();
                MoveRats();

                gameSeconds += gameSpeed;
                StateHasChanged();
            }
        }
    }
}