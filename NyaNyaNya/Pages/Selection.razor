@page "/selection/{IsPlayMusic:bool}/{PlanetId:int}"

<div class="d-flex flex-column justify-content-center align-items-center h-100 w-100 main-menu">

    <div id='stars'></div>
    <div id='stars2'></div>
    <div id='stars3'></div>

    <h1>Select Cats</h1>

    <div class="mt-2 d-grid cols-3 auto-rows">
        @for (int i = 0; i < cats.Count; i++)
        {
            var catIndex = i;

            <div class="grid-item @containerClasses[i]" @onclick="@(e => SelectCat(e, catIndex))">
                <img src="@cats[i].Image"/>
            </div>
        }
    </div>

    <div style="color: white;">
        @foreach(var selectedCat in containerClasses)
        {
            <span>@selectedCat</span>
        }
    </div>

    <div class="d-flex justify-content-center align-items-center mt-2" style="gap: 10px; width: 650px;">
        @for(int i = 0; i < 6; i++)
        {
            var selectedDrawer = i;

            <div class="d-flex flex-column" style="height: 100px; width: 90px; z-index: 5;" @onclick="@(e => DrawCat(e, selectedDrawer))">
                <div class="cat-container d-flex align-items-center justify-content-center" style="height: 80%; width: 100%;">
                    <img src="@catDrawer[i].Image" alt="@catDrawer[i].Name" style="width: 75%; height: 75%;" />
                </div>
                <span class="cat-container d-flex align-items-center justify-content-center" style="height: 20%; width: 100%;">@catDrawer[i].Name</span>
            </div>
        }
    </div>

</div>

<MusicPlayer Track="GreenTea" PlayMusic="IsPlayMusic" />

@code {
    [Parameter]
    public bool IsPlayMusic { get; set; }

    [Parameter]
    public int PlanetId { get; set; }

    private List<Cat> cats;
    private List<bool> selectedCats;
    private List<string> containerClasses;
    private string containerSelected = "container-selected";

    private List<Cat> catDrawer = new List<Cat>();

    private bool catIsSelected = false;
    private int selectedCatIndex = 0;

    public Selection()
    {
        string rootpath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "wwwroot");
        using (StreamReader r = new StreamReader(rootpath + "/database/cats.json"))
        {
            string json = r.ReadToEnd();
            var catsTemp = JsonConvert.DeserializeObject<List<Cat>>(json);
            cats = catsTemp.Where(p => p.Unlocked ).ToList();
        }

        selectedCats = new List<bool>();

        @for(int i = 0; i < cats.Count; i++)
        {
            selectedCats.Add(false);
        }

        containerClasses = new List<string>();

        @for(int i = 0; i < cats.Count; i++)
        {
            containerClasses.Add("");
        }

        for (int i = 0; i < 6; i++)
        {
            catDrawer.Add(new Cat());
        }
    }

    private void SelectCat(MouseEventArgs e, int catIndex)
    {
        selectedCatIndex = catIndex;
        catIsSelected = true;

        for (int i = 0; i < containerClasses.Count; i++)
        {
            containerClasses[i] = "";
        }

        containerClasses[catIndex] = containerSelected;
    }

    private void DrawCat(MouseEventArgs e, int selectedDrawer)
    {
        //add cat to drawer if it hasnt been selected, a cat has been selected and the drawer doesnt have the cat selected
        if (!selectedCats[selectedCatIndex] && catIsSelected && !catDrawer.Any(p => p.Name == cats[selectedCatIndex].Name))
        {
            catDrawer[selectedDrawer] = cats[selectedCatIndex];
            selectedCats[selectedCatIndex] = true;
        }
        else if (!catIsSelected && cats.Any(p => p.Name == catDrawer[selectedDrawer].Name))
        {
            selectedCats[cats.FindIndex(p => p.Name == catDrawer[selectedDrawer].Name)] = false;
            catDrawer[selectedDrawer] = new Cat();
        }
        catIsSelected = false;
        for (int i = 0; i < containerClasses.Count; i++)
        {
            containerClasses[i] = "";
        }
    }
}
